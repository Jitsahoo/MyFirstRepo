{
  "uid" : "2df83be47b6ad555",
  "name" : "test_modify_task_with_invalid",
  "fullName" : "test_endpoint.test_task_update.TestTaskUpdate#test_modify_task_with_invalid",
  "historyId" : "277152fc60587f62f70db64c9e90659b",
  "time" : {
    "start" : 1595223798776,
    "stop" : 1595223800791,
    "duration" : 2015
  },
  "status" : "broken",
  "statusMessage" : "client_utility.request_exception.MyException: Unable to incomplete task may be task id is invalid , 456 with error code 404",
  "statusTrace" : "self = <test_task_utility.task_utility.TaskUtility object at 0x00000292F53968E0>, taskid = 456, update_task = {'completed': False, 'task': 'modifiedtask'}\n\n    def update_task(self,taskid,update_task):\n        try:\n            response = Request(Helper.url + \"/{task_id}\".format(task_id=taskid)).put_request(update_task)\n>           assert 200 == response.status_code, \"Unable to updated the task\"\nE           AssertionError: Unable to updated the task\n\n..\\test_task_utility\\task_utility.py:72: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_endpoint.test_task_update.TestTaskUpdate object at 0x00000292F56DB0D0>\n\n    def test_modify_task_with_invalid(self):\n        logger.info(\"Executing Modify Task API\")\n        logger.info('Sending the POST request with task id %s', 456)\n>       response = TaskUtility().update_task(456, update_task)\n\ntest_task_update.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_task_utility.task_utility.TaskUtility object at 0x00000292F53968E0>, taskid = 456, update_task = {'completed': False, 'task': 'modifiedtask'}\n\n    def update_task(self,taskid,update_task):\n        try:\n            response = Request(Helper.url + \"/{task_id}\".format(task_id=taskid)).put_request(update_task)\n            assert 200 == response.status_code, \"Unable to updated the task\"\n        except AssertionError as error:\n            logger.error(\"Getting assertion error while executing updated task api {error}\".format(error=error.args[0]))\n>           raise MyException(\"Unable to incomplete task may be task id is invalid , {0} with error code {1}\".format(taskid,response.status_code))\nE           client_utility.request_exception.MyException: Unable to incomplete task may be task id is invalid , 456 with error code 404\n\n..\\test_task_utility\\task_utility.py:75: MyException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "create_and_get_task",
    "time" : {
      "start" : 1595223796751,
      "stop" : 1595223798775,
      "duration" : 2024
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "client_utility.request_exception.MyException: Unable to incomplete task may be task id is invalid , 456 with error code 404",
    "statusTrace" : "self = <test_task_utility.task_utility.TaskUtility object at 0x00000292F53968E0>, taskid = 456, update_task = {'completed': False, 'task': 'modifiedtask'}\n\n    def update_task(self,taskid,update_task):\n        try:\n            response = Request(Helper.url + \"/{task_id}\".format(task_id=taskid)).put_request(update_task)\n>           assert 200 == response.status_code, \"Unable to updated the task\"\nE           AssertionError: Unable to updated the task\n\n..\\test_task_utility\\task_utility.py:72: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_endpoint.test_task_update.TestTaskUpdate object at 0x00000292F56DB0D0>\n\n    def test_modify_task_with_invalid(self):\n        logger.info(\"Executing Modify Task API\")\n        logger.info('Sending the POST request with task id %s', 456)\n>       response = TaskUtility().update_task(456, update_task)\n\ntest_task_update.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_task_utility.task_utility.TaskUtility object at 0x00000292F53968E0>, taskid = 456, update_task = {'completed': False, 'task': 'modifiedtask'}\n\n    def update_task(self,taskid,update_task):\n        try:\n            response = Request(Helper.url + \"/{task_id}\".format(task_id=taskid)).put_request(update_task)\n            assert 200 == response.status_code, \"Unable to updated the task\"\n        except AssertionError as error:\n            logger.error(\"Getting assertion error while executing updated task api {error}\".format(error=error.args[0]))\n>           raise MyException(\"Unable to incomplete task may be task id is invalid , {0} with error code {1}\".format(taskid,response.status_code))\nE           client_utility.request_exception.MyException: Unable to incomplete task may be task id is invalid , 456 with error code 404\n\n..\\test_task_utility\\task_utility.py:75: MyException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f7d255e72caba284",
      "name" : "log",
      "source" : "f7d255e72caba284.txt",
      "type" : "text/plain",
      "size" : 1117
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('create_and_get_task')"
  }, {
    "name" : "parentSuite",
    "value" : "test_endpoint"
  }, {
    "name" : "suite",
    "value" : "test_task_update"
  }, {
    "name" : "subSuite",
    "value" : "TestTaskUpdate"
  }, {
    "name" : "host",
    "value" : "LAPTOP-FMV55K7E"
  }, {
    "name" : "thread",
    "value" : "19084-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_endpoint.test_task_update"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures('create_and_get_task')" ]
  },
  "source" : "2df83be47b6ad555.json",
  "parameterValues" : [ ]
}