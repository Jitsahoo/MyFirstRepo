{
  "uid" : "b3618917e6caaeb3",
  "name" : "test_incomplete_task_with_invalid_taskid",
  "fullName" : "test_endpoint.test_task_post.TestTaskPost#test_incomplete_task_with_invalid_taskid",
  "historyId" : "20398bb36416d30485b574d8955bd58f",
  "time" : {
    "start" : 1595223780476,
    "stop" : 1595223782493,
    "duration" : 2017
  },
  "status" : "broken",
  "statusMessage" : "client_utility.request_exception.MyException: Unable to incomplete task may be task id is invalid , 123 with error code 404",
  "statusTrace" : "self = <test_endpoint.test_task_post.TestTaskPost object at 0x00000292F5737070>, taskid = 123\n\n    def get_incompleted_task(self, taskid):\n        try:\n            response = Request(Helper.url + \"/{task_id}/incomplete\".format(task_id=taskid)).post_request(\"\")\n>           assert 200 == response.status_code, \"Unable to completed the task using the task id {task_id}\".format(task_id=taskid)\nE           AssertionError: Unable to completed the task using the task id 123\n\n..\\test_task_utility\\task_utility.py:63: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_endpoint.test_task_post.TestTaskPost object at 0x00000292F56DBEB0>\n\n    def test_incomplete_task_with_invalid_taskid(self):\n        logger.info('Executing Incomplete Task API')\n        logger.info('Sending the POST request with task id %s', 123)\n>       response = TestTaskPost().get_incompleted_task(123)\n\ntest_task_post.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_endpoint.test_task_post.TestTaskPost object at 0x00000292F5737070>, taskid = 123\n\n    def get_incompleted_task(self, taskid):\n        try:\n            response = Request(Helper.url + \"/{task_id}/incomplete\".format(task_id=taskid)).post_request(\"\")\n            assert 200 == response.status_code, \"Unable to completed the task using the task id {task_id}\".format(task_id=taskid)\n        except AssertionError as error:\n            logger.error(\"Got the assertion error for get incompleted task as, {error}\".format(error=error.args[0]))\n>           raise MyException(\"Unable to incomplete task may be task id is invalid , {0} with error code {1}\".format(taskid,response.status_code))\nE           client_utility.request_exception.MyException: Unable to incomplete task may be task id is invalid , 123 with error code 404\n\n..\\test_task_utility\\task_utility.py:66: MyException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "create_and_get_task",
    "time" : {
      "start" : 1595223770371,
      "stop" : 1595223772386,
      "duration" : 2015
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "client_utility.request_exception.MyException: Unable to incomplete task may be task id is invalid , 123 with error code 404",
    "statusTrace" : "self = <test_endpoint.test_task_post.TestTaskPost object at 0x00000292F5737070>, taskid = 123\n\n    def get_incompleted_task(self, taskid):\n        try:\n            response = Request(Helper.url + \"/{task_id}/incomplete\".format(task_id=taskid)).post_request(\"\")\n>           assert 200 == response.status_code, \"Unable to completed the task using the task id {task_id}\".format(task_id=taskid)\nE           AssertionError: Unable to completed the task using the task id 123\n\n..\\test_task_utility\\task_utility.py:63: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_endpoint.test_task_post.TestTaskPost object at 0x00000292F56DBEB0>\n\n    def test_incomplete_task_with_invalid_taskid(self):\n        logger.info('Executing Incomplete Task API')\n        logger.info('Sending the POST request with task id %s', 123)\n>       response = TestTaskPost().get_incompleted_task(123)\n\ntest_task_post.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_endpoint.test_task_post.TestTaskPost object at 0x00000292F5737070>, taskid = 123\n\n    def get_incompleted_task(self, taskid):\n        try:\n            response = Request(Helper.url + \"/{task_id}/incomplete\".format(task_id=taskid)).post_request(\"\")\n            assert 200 == response.status_code, \"Unable to completed the task using the task id {task_id}\".format(task_id=taskid)\n        except AssertionError as error:\n            logger.error(\"Got the assertion error for get incompleted task as, {error}\".format(error=error.args[0]))\n>           raise MyException(\"Unable to incomplete task may be task id is invalid , {0} with error code {1}\".format(taskid,response.status_code))\nE           client_utility.request_exception.MyException: Unable to incomplete task may be task id is invalid , 123 with error code 404\n\n..\\test_task_utility\\task_utility.py:66: MyException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "55b477e7066e55cb",
      "name" : "log",
      "source" : "55b477e7066e55cb.txt",
      "type" : "text/plain",
      "size" : 550
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('create_and_get_task')"
  }, {
    "name" : "parentSuite",
    "value" : "test_endpoint"
  }, {
    "name" : "suite",
    "value" : "test_task_post"
  }, {
    "name" : "subSuite",
    "value" : "TestTaskPost"
  }, {
    "name" : "host",
    "value" : "LAPTOP-FMV55K7E"
  }, {
    "name" : "thread",
    "value" : "19084-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_endpoint.test_task_post"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures('create_and_get_task')" ]
  },
  "source" : "b3618917e6caaeb3.json",
  "parameterValues" : [ ]
}