{
  "uid" : "d0c04b0e9326266e",
  "name" : "test_incomplete_task_with_invalid_taskid",
  "fullName" : "test_endpoint.test_task_post.TestTaskPost#test_incomplete_task_with_invalid_taskid",
  "historyId" : "20398bb36416d30485b574d8955bd58f",
  "time" : {
    "start" : 1595227789251,
    "stop" : 1595227791376,
    "duration" : 2125
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Incomplete api with invalid id didn't work\nassert '{}' == ''\n  + {}",
  "statusTrace" : "self = <test_endpoint.test_task_post.TestTaskPost object at 0x0000022B035ECB20>\n\n    def test_incomplete_task_with_invalid_taskid(self):\n        logger.info('Executing Incomplete Task API')\n        logger.info('Sending the POST request with task id %s', 123)\n        response = TestTaskPost().incomplete_task_using_invalid_id(123)\n        logger.info(\"Data\", response.text)\n>       assert response.text == \"\", \"Incomplete api with invalid id didn't work\"\nE       AssertionError: Incomplete api with invalid id didn't work\nE       assert '{}' == ''\nE         + {}\n\ntest_task_post.py:43: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "create_and_get_task",
    "time" : {
      "start" : 1595227779013,
      "stop" : 1595227781051,
      "duration" : 2038
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Incomplete api with invalid id didn't work\nassert '{}' == ''\n  + {}",
    "statusTrace" : "self = <test_endpoint.test_task_post.TestTaskPost object at 0x0000022B035ECB20>\n\n    def test_incomplete_task_with_invalid_taskid(self):\n        logger.info('Executing Incomplete Task API')\n        logger.info('Sending the POST request with task id %s', 123)\n        response = TestTaskPost().incomplete_task_using_invalid_id(123)\n        logger.info(\"Data\", response.text)\n>       assert response.text == \"\", \"Incomplete api with invalid id didn't work\"\nE       AssertionError: Incomplete api with invalid id didn't work\nE       assert '{}' == ''\nE         + {}\n\ntest_task_post.py:43: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "51df94b7cab4f2f6",
      "name" : "log",
      "source" : "51df94b7cab4f2f6.txt",
      "type" : "text/plain",
      "size" : 400
    }, {
      "uid" : "33a4122cc2ce1005",
      "name" : "stderr",
      "source" : "33a4122cc2ce1005.txt",
      "type" : "text/plain",
      "size" : 15880
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('create_and_get_task')"
  }, {
    "name" : "parentSuite",
    "value" : "test_endpoint"
  }, {
    "name" : "suite",
    "value" : "test_task_post"
  }, {
    "name" : "subSuite",
    "value" : "TestTaskPost"
  }, {
    "name" : "host",
    "value" : "LAPTOP-FMV55K7E"
  }, {
    "name" : "thread",
    "value" : "16612-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_endpoint.test_task_post"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures('create_and_get_task')" ]
  },
  "source" : "d0c04b0e9326266e.json",
  "parameterValues" : [ ]
}